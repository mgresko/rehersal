import tempfile
import shutil


class SCM(object):
    """Base source control object to inherit from"""

    def __init__(self, repo_url=None, clone_dir=None):
        """
        :param string repo_url: URL for scm repository
        :param string clone_dir: explicitly set directory to clone into.
                                 if None a temp directory will be autogenerated
        """
        self._repo_url = repo_url
        if clone_dir:
            self._clone_dir = clone_dir
        else:
            self._clone_dir = tempfile.mkdtemp(dir='/tmp')
        self._repo = None

    def __enter__(self):
        return self

    @property
    def active_branch(self):
        pass

    def clone(self, repo_url=None):
        pass

    def cleanup(self):
        shutil.rmtree(self._clone_dir)

    def checkout(self, branch):
        pass

    @property
    def repo_url(self):
        return self._repo_url

    @property
    def clone_dir(self):
        return self._clone_dir

    def __exit__(self, type, value, traceback):
        shutil.rmtree(self._clone_dir)


class Git(SCM):
    """Git SCM

    Example:

        repo = Git('http://url_to_repo')
        repo.clone()
        repo.checkout('origin/BRANCH')
        ...
        repo.cleanup()

        or

        # cleanup happens automatically
        with Git('http://url_to_repo') as repo:
            repo.clone()
            repo.cleanup('origin/BRANCH')
            ...
    """

    from git import Repo

    @property
    def active_branch(self):
        return self._repo.active_branch

    def clone(self, repo_url=None):
        if repo_url:
            self._repo_url = repo_url
        self._repo = Repo.clone_from(self._repo_url, self._clone_dir)

    def checkout(self, branch):
        git = self._repo.git
        git.checkout('head', b=branch)
